{"ast":null,"code":"var _jsxFileName = \"/Users/braydon/Desktop/React_Training_2021/food-order-app/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport CartButtonContext from './cart-button-context';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartIsOpen, setCartIsOpen] = useState(false);\n  const [itemList, setItemList] = useState({\n    id: 'm1',\n    name: 'Sushi',\n    description: 'Finest fish and veggies',\n    price: 22.99\n  });\n\n  const openCartHandler = () => {\n    setCartIsOpen(true);\n    console.log(\"openCart hit\");\n  };\n\n  const closeCartHandler = () => {\n    setCartIsOpen(false);\n    console.log(\"closeCart hit\");\n  };\n\n  const cartBtnCtx = {\n    cartIsOpen: cartIsOpen,\n    setCartIsOpen: cartIsOpen ? closeCartHandler : openCartHandler\n  };\n\n  const AddItemToCartHandler = () => {};\n\n  const RemoveItemFromCartHandler = () => {};\n\n  const cartCtx = {\n    items: [],\n    count: 0,\n    AddItem: item => {},\n    RemoveItem: item => {}\n  };\n  return /*#__PURE__*/_jsxDEV(CartButtonContext.Provider, {\n    value: {\n      cartBtnCtx,\n      cartCtx\n    },\n    children: /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PgGOyxh/Qz8q5Rr4mbfQpsuoJC4=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/braydon/Desktop/React_Training_2021/food-order-app/src/store/CartProvider.js"],"names":["useState","CartButtonContext","CartContext","CartProvider","props","cartIsOpen","setCartIsOpen","itemList","setItemList","id","name","description","price","openCartHandler","console","log","closeCartHandler","cartBtnCtx","AddItemToCartHandler","RemoveItemFromCartHandler","cartCtx","items","count","AddItem","item","RemoveItem","children"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC;AAEvCS,IAAAA,EAAE,EAAE,IAFmC;AAGvCC,IAAAA,IAAI,EAAE,OAHiC;AAIvCC,IAAAA,WAAW,EAAE,yBAJ0B;AAKvCC,IAAAA,KAAK,EAAE;AALgC,GAAD,CAAxC;;AAQA,QAAMC,eAAe,GAAG,MAAM;AAC5BP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,GAHD;;AAKA,QAAMC,gBAAgB,GAAG,MAAM;AAC7BV,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,GAHD;;AAKA,QAAME,UAAU,GAAG;AACjBZ,IAAAA,UAAU,EAAEA,UADK;AAEjBC,IAAAA,aAAa,EAAED,UAAU,GAAGW,gBAAH,GAAsBH;AAF9B,GAAnB;;AAKA,QAAMK,oBAAoB,GAAG,MAAM,CAElC,CAFD;;AAIA,QAAMC,yBAAyB,GAAG,MAAM,CAEvC,CAFD;;AAIA,QAAMC,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAE,EADO;AAEdC,IAAAA,KAAK,EAAE,CAFO;AAGdC,IAAAA,OAAO,EAAGC,IAAD,IAAU,CAAE,CAHP;AAIdC,IAAAA,UAAU,EAAGD,IAAD,IAAU,CAAE;AAJV,GAAhB;AAOA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAACP,MAAAA,UAAD;AAAaG,MAAAA;AAAb,KAAnC;AAAA,2BACE,QAAC,WAAD,CAAa,QAAb;AAAA,gBACGhB,KAAK,CAACsB;AADT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA/CD;;GAAMvB,Y;;KAAAA,Y;AAiDN,eAAeA,YAAf","sourcesContent":["import { useState } from 'react'\nimport CartButtonContext from './cart-button-context'\nimport CartContext from './cart-context'\n\nconst CartProvider = (props) => {\n  const [cartIsOpen, setCartIsOpen] = useState(false);\n  const [itemList, setItemList] = useState({\n\n    id: 'm1',\n    name: 'Sushi',\n    description: 'Finest fish and veggies',\n    price: 22.99,\n  });\n\n  const openCartHandler = () => {\n    setCartIsOpen(true);\n    console.log(\"openCart hit\")\n  }\n\n  const closeCartHandler = () => {\n    setCartIsOpen(false);\n    console.log(\"closeCart hit\")\n  }\n\n  const cartBtnCtx = {\n    cartIsOpen: cartIsOpen,\n    setCartIsOpen: cartIsOpen ? closeCartHandler : openCartHandler\n  }\n\n  const AddItemToCartHandler = () => {\n\n  }\n\n  const RemoveItemFromCartHandler = () => {\n    \n  }\n\n  const cartCtx = {\n    items: [],\n    count: 0,\n    AddItem: (item) => {},\n    RemoveItem: (item) => {},\n  }\n\n  return (\n    <CartButtonContext.Provider value={{cartBtnCtx, cartCtx}}>\n      <CartContext.Provider>\n        {props.children}\n      </CartContext.Provider>\n    </CartButtonContext.Provider>\n  )\n}\n\nexport default CartProvider\n"]},"metadata":{},"sourceType":"module"}