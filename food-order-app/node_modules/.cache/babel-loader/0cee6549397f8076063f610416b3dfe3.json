{"ast":null,"code":"var _jsxFileName = \"/Users/braydon/Desktop/React_Training_2021/food-order-app/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useReducer } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport CartButtonContext from './cart-button-context';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  // ---- ADD action ----\n  if (action.type === 'ADD') {\n    // update total amount with curr + (new price * new amount)\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount //update amount to current + added amount by action\n\n      };\n      updatedItems = [...state.items]; // init to current state of items\n\n      updatedItems[existingCartItemIndex] = updatedItem; // fill in final slot with newly added item\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  } // ---- REMOVE action ----\n\n\n  if (action.type === 'REMOVE') {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex]; // Update Amount\n\n    const updatedTotalAmount = state.totalAmount - existingItem.price; // Update Items\n\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } // Update api database\n\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  } // ---- CLEAR action ----\n\n\n  if (action.type === 'CLEAR') {\n    return defaultCartState;\n  }\n\n  return defaultCartState;\n}; // const animationReducer = (state, action) => {\n//   // ---- ADD action ----\n//   if (action.type === 'ADD') {\n//   }\n//   return defaultCartState;\n// }\n\n\nconst CartProvider = props => {\n  _s();\n\n  const history = useHistory();\n  const [cartIsOpen, setCartIsOpen] = useState(false);\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState); // const [itemList, setItemList] = useState({\n  //   id: '',\n  //   name: '',\n  //   description: '',\n  //   price: 0,\n  // });\n\n  const openCartHandler = () => {\n    console.log(\"openCart hit\");\n    setCartIsOpen(true);\n    history.push('/cart');\n  };\n\n  const closeCartHandler = () => {\n    console.log(\"closeCart hit\");\n    setCartIsOpen(false);\n    history.push('/meals');\n  };\n\n  const cartBtnCtx = {\n    cartIsOpen: cartIsOpen,\n    setCartIsOpen: cartIsOpen ? closeCartHandler : openCartHandler,\n    openCart: openCartHandler,\n    closeCart: closeCartHandler\n  };\n\n  const AddItemToCartHandler = item => {\n    console.log('add item');\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const RemoveItemFromCartHandler = id => {\n    console.log('remove item');\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const clearCartHandler = () => {\n    console.log('clear items');\n    dispatchCartAction({\n      type: 'CLEAR'\n    });\n  };\n\n  const cartCtx = {\n    items: cartState.items,\n    amount: cartState.amount,\n    AddItem: AddItemToCartHandler,\n    RemoveItem: RemoveItemFromCartHandler,\n    ClearCart: clearCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartButtonContext.Provider, {\n    value: cartBtnCtx,\n    children: /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n      value: cartCtx,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"Z4B2HCAqhxOEEBIdDN9vVIRBRQg=\", false, function () {\n  return [useHistory];\n});\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/braydon/Desktop/React_Training_2021/food-order-app/src/store/CartProvider.js"],"names":["useState","useReducer","useHistory","CartButtonContext","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","filter","CartProvider","props","history","cartIsOpen","setCartIsOpen","cartState","dispatchCartAction","openCartHandler","console","log","push","closeCartHandler","cartBtnCtx","openCart","closeCart","AddItemToCartHandler","RemoveItemFromCartHandler","clearCartHandler","cartCtx","AddItem","RemoveItem","ClearCart","children"],"mappings":"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","sourcesContent":["import { useState, useReducer } from 'react'\nimport { useHistory } from 'react-router-dom';\n\nimport CartButtonContext from './cart-button-context'\nimport CartContext from './cart-context'\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst cartReducer = (state, action) => {\n\n  // ---- ADD action ----\n  if (action.type === 'ADD') {\n    // update total amount with curr + (new price * new amount)\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    let updatedItems;\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount //update amount to current + added amount by action\n      };\n      updatedItems = [...state.items]; // init to current state of items\n      updatedItems[existingCartItemIndex] = updatedItem; // fill in final slot with newly added item\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  // ---- REMOVE action ----\n  if (action.type === 'REMOVE') {\n\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.id\n    );\n    const existingItem = state.items[existingCartItemIndex];\n\n    // Update Amount\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n    // Update Items\n    let updatedItems;\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    // Update api database\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  // ---- CLEAR action ----\n  if (action.type === 'CLEAR') {\n    return defaultCartState;\n  }\n\n  return defaultCartState;\n}\n\n// const animationReducer = (state, action) => {\n\n//   // ---- ADD action ----\n//   if (action.type === 'ADD') {\n\n//   }\n//   return defaultCartState;\n// }\n\nconst CartProvider = (props) => {\n  const history = useHistory();\n  const [cartIsOpen, setCartIsOpen] = useState(false);\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n  // const [itemList, setItemList] = useState({\n  //   id: '',\n  //   name: '',\n  //   description: '',\n  //   price: 0,\n  // });\n\n  const openCartHandler = () => {\n    console.log(\"openCart hit\")\n    setCartIsOpen(true);\n    history.push('/cart');\n  }\n\n  const closeCartHandler = () => {\n    console.log(\"closeCart hit\")\n    setCartIsOpen(false);\n    history.push('/meals');\n  }\n\n  const cartBtnCtx = {\n    cartIsOpen: cartIsOpen,\n    setCartIsOpen: cartIsOpen ? closeCartHandler : openCartHandler,\n    openCart: openCartHandler,\n    closeCart: closeCartHandler\n  }\n\n  const AddItemToCartHandler = (item) => {\n    console.log('add item')\n    dispatchCartAction({type: 'ADD', item: item});\n  }\n\n  const RemoveItemFromCartHandler = (id) => {\n    console.log('remove item')\n    dispatchCartAction({type: 'REMOVE', id: id});\n  }\n\n  const clearCartHandler = () => {\n    console.log('clear items')\n    dispatchCartAction({type: 'CLEAR'});\n  };\n\n  const cartCtx = {\n    items: cartState.items,\n    amount: cartState.amount,\n    AddItem: AddItemToCartHandler,\n    RemoveItem: RemoveItemFromCartHandler,\n    ClearCart: clearCartHandler, \n  }\n\n  return (\n    <CartButtonContext.Provider value={cartBtnCtx}>\n      <CartContext.Provider value={cartCtx}>\n        {props.children}\n      </CartContext.Provider>\n    </CartButtonContext.Provider>\n  )\n}\n\nexport default CartProvider\n"]},"metadata":{},"sourceType":"module"}