{"ast":null,"code":"var _jsxFileName = \"/Users/braydon/Desktop/React_Training_2021/food-order-app/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport CartButtonContext from './cart-button-context';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst CartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount //update amount to current + added amount by action\n\n      };\n    }\n  }\n};\n\n_c = CartReducer;\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartIsOpen, setCartIsOpen] = useState(false);\n  const [itemList, setItemList] = useState({\n    id: '',\n    name: '',\n    description: '',\n    price: 0\n  });\n\n  const openCartHandler = () => {\n    setCartIsOpen(true);\n    console.log(\"openCart hit\");\n  };\n\n  const closeCartHandler = () => {\n    setCartIsOpen(false);\n    console.log(\"closeCart hit\");\n  };\n\n  const cartBtnCtx = {\n    cartIsOpen: cartIsOpen,\n    setCartIsOpen: cartIsOpen ? closeCartHandler : openCartHandler\n  };\n\n  const AddItemToCartHandler = item => {\n    console.log('add item');\n  };\n\n  const RemoveItemFromCartHandler = id => {};\n\n  const cartCtx = {\n    items: [],\n    count: 0,\n    AddItem: AddItemToCartHandler,\n    RemoveItem: RemoveItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartButtonContext.Provider, {\n    value: cartBtnCtx,\n    children: /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n      value: cartCtx,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"aARRG/CGXd8x0U4MN7ehGHUfHjM=\");\n\n_c2 = CartProvider;\nexport default CartProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CartReducer\");\n$RefreshReg$(_c2, \"CartProvider\");","map":{"version":3,"sources":["/Users/braydon/Desktop/React_Training_2021/food-order-app/src/store/CartProvider.js"],"names":["useState","CartButtonContext","CartContext","defaultCartState","items","totalAmount","CartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","CartProvider","props","cartIsOpen","setCartIsOpen","itemList","setItemList","name","description","openCartHandler","console","log","closeCartHandler","cartBtnCtx","AddItemToCartHandler","RemoveItemFromCartHandler","cartCtx","count","AddItem","RemoveItem","children"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,UAAMC,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAA/E;AACA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAC3BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EADN,CAA9B;AAGA,UAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB;AAEA,QAAII,YAAJ;;AACA,QAAID,gBAAJ,EAAsB;AACpB,YAAME,WAAW,GAAG,EAClB,GAAGF,gBADe;AAElBJ,QAAAA,MAAM,EAAEI,gBAAgB,CAACJ,MAAjB,GAA0BL,MAAM,CAACG,IAAP,CAAYE,MAF5B,CAEmC;;AAFnC,OAApB;AAKD;AACF;AACF,CAjBD;;KAAMP,W;;AAmBN,MAAMc,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC;AACvCgB,IAAAA,EAAE,EAAE,EADmC;AAEvCU,IAAAA,IAAI,EAAE,EAFiC;AAGvCC,IAAAA,WAAW,EAAE,EAH0B;AAIvCf,IAAAA,KAAK,EAAE;AAJgC,GAAD,CAAxC;;AAOA,QAAMgB,eAAe,GAAG,MAAM;AAC5BL,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,GAHD;;AAKA,QAAMC,gBAAgB,GAAG,MAAM;AAC7BR,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,GAHD;;AAKA,QAAME,UAAU,GAAG;AACjBV,IAAAA,UAAU,EAAEA,UADK;AAEjBC,IAAAA,aAAa,EAAED,UAAU,GAAGS,gBAAH,GAAsBH;AAF9B,GAAnB;;AAKA,QAAMK,oBAAoB,GAAItB,IAAD,IAAU;AACrCkB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,GAFD;;AAIA,QAAMI,yBAAyB,GAAIlB,EAAD,IAAQ,CAEzC,CAFD;;AAIA,QAAMmB,OAAO,GAAG;AACd/B,IAAAA,KAAK,EAAE,EADO;AAEdgC,IAAAA,KAAK,EAAE,CAFO;AAGdC,IAAAA,OAAO,EAAEJ,oBAHK;AAIdK,IAAAA,UAAU,EAAEJ;AAJE,GAAhB;AAOA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEF,UAAnC;AAAA,2BACE,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAEG,OAA7B;AAAA,gBACGd,KAAK,CAACkB;AADT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA9CD;;GAAMnB,Y;;MAAAA,Y;AAgDN,eAAeA,YAAf","sourcesContent":["import { useState } from 'react'\nimport CartButtonContext from './cart-button-context'\nimport CartContext from './cart-context'\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst CartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    let updatedItems;\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount //update amount to current + added amount by action\n      };\n      \n    }\n  }\n}\n\nconst CartProvider = (props) => {\n  const [cartIsOpen, setCartIsOpen] = useState(false);\n  const [itemList, setItemList] = useState({\n    id: '',\n    name: '',\n    description: '',\n    price: 0,\n  });\n\n  const openCartHandler = () => {\n    setCartIsOpen(true);\n    console.log(\"openCart hit\")\n  }\n\n  const closeCartHandler = () => {\n    setCartIsOpen(false);\n    console.log(\"closeCart hit\")\n  }\n\n  const cartBtnCtx = {\n    cartIsOpen: cartIsOpen,\n    setCartIsOpen: cartIsOpen ? closeCartHandler : openCartHandler\n  }\n\n  const AddItemToCartHandler = (item) => {\n    console.log('add item')\n  }\n\n  const RemoveItemFromCartHandler = (id) => {\n    \n  }\n\n  const cartCtx = {\n    items: [],\n    count: 0,\n    AddItem: AddItemToCartHandler,\n    RemoveItem: RemoveItemFromCartHandler,\n  }\n\n  return (\n    <CartButtonContext.Provider value={cartBtnCtx}>\n      <CartContext.Provider value={cartCtx}>\n        {props.children}\n      </CartContext.Provider>\n    </CartButtonContext.Provider>\n  )\n}\n\nexport default CartProvider\n"]},"metadata":{},"sourceType":"module"}