{"ast":null,"code":"var _jsxFileName = \"/Users/braydon/Desktop/07-new-starting-project/src/store/favorites-context.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FavoritesContext = /*#__PURE__*/createContext({\n  favorites: [],\n  // list of favorite meetups\n  favoritesCount: 0,\n  // length of list\n  addFavorite: favMeetup => {},\n  // init functions good practice for autocompletion\n  removeFavorite: meetupId => {},\n  isFavorite: meetupId => {}\n});\nexport function FavoritesContextProvider(props) {\n  _s();\n\n  const [favoriteMeetups, setFavoriteMeetups] = useState([]);\n\n  function addFavHandler(newFavorite) {\n    setFavoriteMeetups(currFavorites => {\n      return currFavorites.concat(newFavorite);\n    });\n  }\n\n  function removeFavHandler(meetupId) {\n    setFavoriteMeetups(currFavorites => {\n      return currFavorites.filter(currId => currId !== meetupId);\n    });\n  }\n\n  function isFavHandler(meetupId) {\n    setFavoriteMeetups(currFavorites => {\n      return currFavorites.some(currId => currId === meetupId);\n    });\n  }\n\n  const context = {\n    favorites: favoriteMeetups,\n    favoritesCount: favoriteMeetups.length,\n    addFavorite: addFavHandler,\n    removeFavorite: removeFavHandler,\n    isFavorite: isFavHandler\n  };\n  return /*#__PURE__*/_jsxDEV(FavoritesContext.Provider, {\n    value: context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FavoritesContextProvider, \"luVv9OT3dM0b93EoNs5DYKm76pM=\");\n\n_c = FavoritesContextProvider;\nexport default FavoritesContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"FavoritesContextProvider\");","map":{"version":3,"sources":["/Users/braydon/Desktop/07-new-starting-project/src/store/favorites-context.js"],"names":["createContext","useState","FavoritesContext","favorites","favoritesCount","addFavorite","favMeetup","removeFavorite","meetupId","isFavorite","FavoritesContextProvider","props","favoriteMeetups","setFavoriteMeetups","addFavHandler","newFavorite","currFavorites","concat","removeFavHandler","filter","currId","isFavHandler","some","context","length","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;AAEA,MAAMC,gBAAgB,gBAAGF,aAAa,CAAC;AACnCG,EAAAA,SAAS,EAAE,EADwB;AACpB;AACfC,EAAAA,cAAc,EAAE,CAFmB;AAEhB;AACnBC,EAAAA,WAAW,EAAGC,SAAD,IAAe,CAAE,CAHK;AAGF;AACjCC,EAAAA,cAAc,EAAGC,QAAD,IAAc,CAAE,CAJG;AAKnCC,EAAAA,UAAU,EAAGD,QAAD,IAAc,CAAE;AALO,CAAD,CAAtC;AAQA,OAAO,SAASE,wBAAT,CAAkCC,KAAlC,EAAyC;AAAA;;AAC5C,QAAM,CAAEC,eAAF,EAAoBC,kBAApB,IAA2CZ,QAAQ,CAAC,EAAD,CAAzD;;AAEA,WAASa,aAAT,CAAuBC,WAAvB,EAAoC;AAChCF,IAAAA,kBAAkB,CAACG,aAAa,IAAI;AAChC,aAAOA,aAAa,CAACC,MAAd,CAAqBF,WAArB,CAAP;AACH,KAFiB,CAAlB;AAGH;;AAED,WAASG,gBAAT,CAA0BV,QAA1B,EAAoC;AAChCK,IAAAA,kBAAkB,CAACG,aAAa,IAAI;AAChC,aAAOA,aAAa,CAACG,MAAd,CAAqBC,MAAM,IAAIA,MAAM,KAAKZ,QAA1C,CAAP;AACH,KAFiB,CAAlB;AAGH;;AAED,WAASa,YAAT,CAAsBb,QAAtB,EAAgC;AAC5BK,IAAAA,kBAAkB,CAACG,aAAa,IAAI;AAChC,aAAOA,aAAa,CAACM,IAAd,CAAmBF,MAAM,IAAIA,MAAM,KAAKZ,QAAxC,CAAP;AACH,KAFiB,CAAlB;AAGH;;AAED,QAAMe,OAAO,GAAG;AACZpB,IAAAA,SAAS,EAAES,eADC;AAEZR,IAAAA,cAAc,EAAEQ,eAAe,CAACY,MAFpB;AAGZnB,IAAAA,WAAW,EAAES,aAHD;AAIZP,IAAAA,cAAc,EAAEW,gBAJJ;AAKZT,IAAAA,UAAU,EAAEY;AALA,GAAhB;AAQA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEE,OAAlC;AAAA,cACKZ,KAAK,CAACc;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAlCef,wB;;KAAAA,wB;AAoChB,eAAeA,wBAAf","sourcesContent":["import { createContext, useState } from 'react'\n\nconst FavoritesContext = createContext({\n    favorites: [], // list of favorite meetups\n    favoritesCount: 0, // length of list\n    addFavorite: (favMeetup) => {},  // init functions good practice for autocompletion\n    removeFavorite: (meetupId) => {},\n    isFavorite: (meetupId) => {},\n});\n\nexport function FavoritesContextProvider(props) {\n    const [ favoriteMeetups , setFavoriteMeetups ] = useState([]);\n\n    function addFavHandler(newFavorite) {\n        setFavoriteMeetups(currFavorites => {\n            return currFavorites.concat(newFavorite);\n        });\n    }\n\n    function removeFavHandler(meetupId) {\n        setFavoriteMeetups(currFavorites => {\n            return currFavorites.filter(currId => currId !== meetupId)\n        });\n    }\n\n    function isFavHandler(meetupId) {\n        setFavoriteMeetups(currFavorites => {\n            return currFavorites.some(currId => currId === meetupId)\n        });\n    }\n\n    const context = {\n        favorites: favoriteMeetups,\n        favoritesCount: favoriteMeetups.length,\n        addFavorite: addFavHandler,\n        removeFavorite: removeFavHandler,\n        isFavorite: isFavHandler,\n    };\n\n    return (\n        <FavoritesContext.Provider value={context}>\n            {props.children}\n        </FavoritesContext.Provider>\n    );\n}\n\nexport default FavoritesContextProvider;"]},"metadata":{},"sourceType":"module"}